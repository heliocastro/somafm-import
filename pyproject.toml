[tool.poetry]
name = "somafm"
version = "0.2.2"
description = ""
authors = ["Helio Chissini de Castro <heliocastro@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
requests = "^2.31.0"
python-dotenv = "^0.21.0"
appdirs = "^1.4.4"
defusedxml = "^0.7.1"

[tool.poetry.group.dev.dependencies]
black = "*"
defusedxml = "^0.7.1"
mypy = "*"
pre-commit = "*"
pycodestyle = "*"
pylint = "*"
pytest-cov = "*"
pytest-mypy = "*"
ruff = "*"
types-pyyaml = "*"
types-requests = "^2.31.0.20240406"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
soma = "somafm.__main__:main"

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
log_cli = true
log_cli_level = "INFO"
pythonpath = "src"

# [tool.pylint.messages_control]
# disable = [
#     "abstract-method",
#     "arguments-differ",
#     "attribute-defined-outside-init",
#     "blacklisted-name",
#     "chained-comparison",
#     "duplicate-code",
#     "eval-used",
#     "exec-used",
#     "expression-not-assigned",
#     "fixme",
#     "global-statement",
#     "invalid-name",
#     "import-error",
#     "logging-fstring-interpolation",
#     "missing-docstring",
#     "no-member",
#     "no-name-in-module",
#     "protected-access",
#     "redefined-argument-from-local",
#     "redefined-outer-name",
#     "reimported",
#     "stop-iteration-return",
#     "too-few-public-methods",
#     "too-many-ancestors",
#     "too-many-arguments",
#     "too-many-branches",
#     "too-many-instance-attributes",
#     "too-many-lines",
#     "too-many-locals",
#     "too-many-return-statements",
#     "too-many-statements",
#     "unexpected-special-method-signature",
#     "unspecified-encoding",
# ]

[tool.mypy]
follow_imports = "normal"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.ruff]
fix = true
line-length = 120
ignore = []
extend-select = [
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "A",   # flakes8-builtins
    "COM", # flakes8-commas
    "C4",  # flake8-comprehensions
    "Q",   # flake8-quotes
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "I",   # isort
    "N",   # pep8 naming
    "UP",  # pyupgrade
    "S",   # bandit
]

# Exclude a variety of commonly ignored directories.
extend-exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.lint.isort]
case-sensitive = true

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]
